
FinalOne328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00000f40  00000fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015ce  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096f  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000758  00000000  00000000  00003061  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  000037bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a8  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b00  00000000  00000000  00003dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000048d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__divsf3_pse+0x62>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	e0 e4       	ldi	r30, 0x40	; 64
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 37       	cpi	r26, 0x70	; 112
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>
 10c:	0e 94 13 02 	call	0x426	; 0x426 <main>
 110:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <lcdcommand>:
 */ 

#include "LCD16x2_4bit.h"
void lcdcommand(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
 118:	9b b1       	in	r25, 0x0b	; 11
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	28 2f       	mov	r18, r24
 11e:	20 7f       	andi	r18, 0xF0	; 240
 120:	92 2b       	or	r25, r18
 122:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
 124:	9b b1       	in	r25, 0x0b	; 11
 126:	9e 7f       	andi	r25, 0xFE	; 254
 128:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
 12a:	9b b1       	in	r25, 0x0b	; 11
 12c:	94 60       	ori	r25, 0x04	; 4
 12e:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	35 e0       	ldi	r19, 0x05	; 5
 132:	3a 95       	dec	r19
 134:	f1 f7       	brne	.-4      	; 0x132 <lcdcommand+0x1a>
 136:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	9b 7f       	andi	r25, 0xFB	; 251
 13c:	9b b9       	out	0x0b, r25	; 11
 13e:	ef e8       	ldi	r30, 0x8F	; 143
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcdcommand+0x2a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcdcommand+0x30>
 148:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
 14a:	2b b1       	in	r18, 0x0b	; 11
 14c:	f0 e1       	ldi	r31, 0x10	; 16
 14e:	8f 9f       	mul	r24, r31
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
 154:	92 2f       	mov	r25, r18
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	89 2b       	or	r24, r25
 15a:	8b b9       	out	0x0b, r24	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	8b b9       	out	0x0b, r24	; 11
 162:	35 e0       	ldi	r19, 0x05	; 5
 164:	3a 95       	dec	r19
 166:	f1 f7       	brne	.-4      	; 0x164 <lcdcommand+0x4c>
 168:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	9f e1       	ldi	r25, 0x1F	; 31
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcdcommand+0x5c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcdcommand+0x62>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <lcddata>:
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE */
}

void lcddata(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
 17e:	9b b1       	in	r25, 0x0b	; 11
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	28 2f       	mov	r18, r24
 184:	20 7f       	andi	r18, 0xF0	; 240
 186:	92 2b       	or	r25, r18
 188:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
 18a:	9b b1       	in	r25, 0x0b	; 11
 18c:	91 60       	ori	r25, 0x01	; 1
 18e:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
 190:	9b b1       	in	r25, 0x0b	; 11
 192:	94 60       	ori	r25, 0x04	; 4
 194:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	35 e0       	ldi	r19, 0x05	; 5
 198:	3a 95       	dec	r19
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcddata+0x1a>
 19c:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	9b 7f       	andi	r25, 0xFB	; 251
 1a2:	9b b9       	out	0x0b, r25	; 11
 1a4:	ef e8       	ldi	r30, 0x8F	; 143
 1a6:	f1 e0       	ldi	r31, 0x01	; 1
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcddata+0x2a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcddata+0x30>
 1ae:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
 1b0:	2b b1       	in	r18, 0x0b	; 11
 1b2:	f0 e1       	ldi	r31, 0x10	; 16
 1b4:	8f 9f       	mul	r24, r31
 1b6:	c0 01       	movw	r24, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	92 2f       	mov	r25, r18
 1bc:	9f 70       	andi	r25, 0x0F	; 15
 1be:	89 2b       	or	r24, r25
 1c0:	8b b9       	out	0x0b, r24	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	35 e0       	ldi	r19, 0x05	; 5
 1ca:	3a 95       	dec	r19
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcddata+0x4c>
 1ce:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	8b 7f       	andi	r24, 0xFB	; 251
 1d4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9f e1       	ldi	r25, 0x1F	; 31
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcddata+0x5c>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lcddata+0x62>
 1e0:	00 00       	nop
 1e2:	08 95       	ret

000001e4 <lcdinit>:
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE*/
}

void lcdinit()
{
	LCD_DPRT &= ~ (1<<LCD_RW);
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	8d 7f       	andi	r24, 0xFD	; 253
 1e8:	8b b9       	out	0x0b, r24	; 11
	
	LCD_DDDR = 0xFF;
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	8a b9       	out	0x0a, r24	; 10
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	83 ec       	ldi	r24, 0xC3	; 195
 1f2:	99 e0       	ldi	r25, 0x09	; 9
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <lcdinit+0x10>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcdinit+0x1a>
 1fe:	00 00       	nop
	_delay_ms(200);									/* WAIT FOR SOME TIME */
	lcdcommand(0x33);
 200:	83 e3       	ldi	r24, 0x33	; 51
 202:	0e 94 8c 00 	call	0x118	; 0x118 <lcdcommand>
	lcdcommand(0x32);								/* SEND $32 FOR INIT OT 0X02 */
 206:	82 e3       	ldi	r24, 0x32	; 50
 208:	0e 94 8c 00 	call	0x118	; 0x118 <lcdcommand>
	lcdcommand(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 8c 00 	call	0x118	; 0x118 <lcdcommand>
	lcdcommand(0x0C);								/* DISPLAY ON CURSOR ON */
 212:	8c e0       	ldi	r24, 0x0C	; 12
 214:	0e 94 8c 00 	call	0x118	; 0x118 <lcdcommand>
	lcdcommand(0x01);								/* LCD CLEAR */
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 8c 00 	call	0x118	; 0x118 <lcdcommand>
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9f e1       	ldi	r25, 0x1F	; 31
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcdinit+0x3e>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcdinit+0x44>
 228:	00 00       	nop
	_delay_ms(2);
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
 22a:	82 e8       	ldi	r24, 0x82	; 130
 22c:	0e 94 8c 00 	call	0x118	; 0x118 <lcdcommand>
 230:	08 95       	ret

00000232 <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <lcd_gotoxy+0x6>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharadd[]={0x80, 0xC0};
 23c:	90 e8       	ldi	r25, 0x80	; 128
 23e:	99 83       	std	Y+1, r25	; 0x01
 240:	90 ec       	ldi	r25, 0xC0	; 192
 242:	9a 83       	std	Y+2, r25	; 0x02
	lcdcommand(firstcharadd[y] + x);
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	e6 0f       	add	r30, r22
 24e:	f1 1d       	adc	r31, r1
 250:	90 81       	ld	r25, Z
 252:	89 0f       	add	r24, r25
 254:	0e 94 8c 00 	call	0x118	; 0x118 <lcdcommand>
}
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <lcd_print>:

void lcd_print(char *str)
{
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	8c 01       	movw	r16, r24
	unsigned char i=0;
 26a:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
 26c:	03 c0       	rjmp	.+6      	; 0x274 <lcd_print+0x12>
	{
		lcddata(str[i]);
 26e:	0e 94 bf 00 	call	0x17e	; 0x17e <lcddata>
		i++;
 272:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 274:	f8 01       	movw	r30, r16
 276:	ec 0f       	add	r30, r28
 278:	f1 1d       	adc	r31, r1
 27a:	80 81       	ld	r24, Z
 27c:	81 11       	cpse	r24, r1
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <lcd_print+0xc>
	{
		lcddata(str[i]);
		i++;
	}
}
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <lcd_clear>:

void lcd_clear()
{
	lcdcommand(0x01);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 8c 00 	call	0x118	; 0x118 <lcdcommand>
 28e:	8f e3       	ldi	r24, 0x3F	; 63
 290:	9f e1       	ldi	r25, 0x1F	; 31
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_clear+0xa>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_clear+0x10>
 298:	00 00       	nop
 29a:	08 95       	ret

0000029c <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
 29c:	80 e4       	ldi	r24, 0x40	; 64
 29e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// ADC Enable and prescaler of 128
	// 8000000/128 = 62500
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2a2:	87 e8       	ldi	r24, 0x87	; 135
 2a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2a8:	08 95       	ret

000002aa <adc_read>:
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
 2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 2ac:	ec e7       	ldi	r30, 0x7C	; 124
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	90 81       	ld	r25, Z
 2b2:	98 7f       	andi	r25, 0xF8	; 248
 2b4:	89 2b       	or	r24, r25
 2b6:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 2b8:	ea e7       	ldi	r30, 0x7A	; 122
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 2c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2c6:	86 fd       	sbrc	r24, 6
 2c8:	fc cf       	rjmp	.-8      	; 0x2c2 <adc_read+0x18>
	
	return (ADC);
 2ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 2d2:	08 95       	ret

000002d4 <reverse>:


// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
 2d4:	61 50       	subi	r22, 0x01	; 1
 2d6:	71 09       	sbc	r23, r1
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
	while (i<j)
 2dc:	0e c0       	rjmp	.+28     	; 0x2fa <reverse+0x26>
	{
		temp = str[i];
 2de:	dc 01       	movw	r26, r24
 2e0:	a2 0f       	add	r26, r18
 2e2:	b3 1f       	adc	r27, r19
 2e4:	4c 91       	ld	r20, X
		str[i] = str[j];
 2e6:	fc 01       	movw	r30, r24
 2e8:	e6 0f       	add	r30, r22
 2ea:	f7 1f       	adc	r31, r23
 2ec:	50 81       	ld	r21, Z
 2ee:	5c 93       	st	X, r21
		str[j] = temp;
 2f0:	40 83       	st	Z, r20
		i++; j--;
 2f2:	2f 5f       	subi	r18, 0xFF	; 255
 2f4:	3f 4f       	sbci	r19, 0xFF	; 255
 2f6:	61 50       	subi	r22, 0x01	; 1
 2f8:	71 09       	sbc	r23, r1

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
 2fa:	26 17       	cp	r18, r22
 2fc:	37 07       	cpc	r19, r23
 2fe:	7c f3       	brlt	.-34     	; 0x2de <reverse+0xa>
		temp = str[i];
		str[i] = str[j];
		str[j] = temp;
		i++; j--;
	}
}
 300:	08 95       	ret

00000302 <intToStr>:

// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	8b 01       	movw	r16, r22
 30c:	9a 01       	movw	r18, r20
	int i = 0;
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	d0 e0       	ldi	r29, 0x00	; 0
	while (x)
 312:	0c c0       	rjmp	.+24     	; 0x32c <intToStr+0x2a>
	{
		str[i++] = (x%10) + '0';
 314:	f8 01       	movw	r30, r16
 316:	ec 0f       	add	r30, r28
 318:	fd 1f       	adc	r31, r29
 31a:	6a e0       	ldi	r22, 0x0A	; 10
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 322:	80 5d       	subi	r24, 0xD0	; 208
 324:	80 83       	st	Z, r24
		x = x/10;
 326:	86 2f       	mov	r24, r22
 328:	97 2f       	mov	r25, r23
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
	{
		str[i++] = (x%10) + '0';
 32a:	21 96       	adiw	r28, 0x01	; 1
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	91 f7       	brne	.-28     	; 0x314 <intToStr+0x12>
 330:	06 c0       	rjmp	.+12     	; 0x33e <intToStr+0x3c>
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
 332:	f8 01       	movw	r30, r16
 334:	ec 0f       	add	r30, r28
 336:	fd 1f       	adc	r31, r29
 338:	80 e3       	ldi	r24, 0x30	; 48
 33a:	80 83       	st	Z, r24
 33c:	21 96       	adiw	r28, 0x01	; 1
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 33e:	c2 17       	cp	r28, r18
 340:	d3 07       	cpc	r29, r19
 342:	bc f3       	brlt	.-18     	; 0x332 <intToStr+0x30>
	str[i++] = '0';
	
	reverse(str, i);
 344:	be 01       	movw	r22, r28
 346:	c8 01       	movw	r24, r16
 348:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <reverse>
	str[i] = ' ';
 34c:	f8 01       	movw	r30, r16
 34e:	ec 0f       	add	r30, r28
 350:	fd 1f       	adc	r31, r29
 352:	80 e2       	ldi	r24, 0x20	; 32
 354:	80 83       	st	Z, r24
	return i;
}
 356:	ce 01       	movw	r24, r28
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	08 95       	ret

00000362 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 362:	4f 92       	push	r4
 364:	5f 92       	push	r5
 366:	6f 92       	push	r6
 368:	7f 92       	push	r7
 36a:	8f 92       	push	r8
 36c:	9f 92       	push	r9
 36e:	af 92       	push	r10
 370:	bf 92       	push	r11
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	2b 01       	movw	r4, r22
 380:	3c 01       	movw	r6, r24
 382:	7a 01       	movw	r14, r20
 384:	89 01       	movw	r16, r18
	// Extract integer part
	int ipart = (int)n;
 386:	0e 94 9c 04 	call	0x938	; 0x938 <__fixsfsi>
 38a:	4b 01       	movw	r8, r22
 38c:	5c 01       	movw	r10, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
 38e:	07 2e       	mov	r0, r23
 390:	00 0c       	add	r0, r0
 392:	88 0b       	sbc	r24, r24
 394:	99 0b       	sbc	r25, r25
 396:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
 39a:	9b 01       	movw	r18, r22
 39c:	ac 01       	movw	r20, r24
 39e:	c3 01       	movw	r24, r6
 3a0:	b2 01       	movw	r22, r4
 3a2:	0e 94 b8 03 	call	0x770	; 0x770 <__subsf3>
 3a6:	2b 01       	movw	r4, r22
 3a8:	3c 01       	movw	r6, r24
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	b7 01       	movw	r22, r14
 3b0:	c4 01       	movw	r24, r8
 3b2:	0e 94 81 01 	call	0x302	; 0x302 <intToStr>
 3b6:	ec 01       	movw	r28, r24
	
	// check for display option after point
	if (afterpoint != 0)
 3b8:	01 15       	cp	r16, r1
 3ba:	11 05       	cpc	r17, r1
 3bc:	29 f1       	breq	.+74     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		res[i] = '.';  // add dot
 3be:	f7 01       	movw	r30, r14
 3c0:	e8 0f       	add	r30, r24
 3c2:	f9 1f       	adc	r31, r25
 3c4:	8e e2       	ldi	r24, 0x2E	; 46
 3c6:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 3c8:	b8 01       	movw	r22, r16
 3ca:	01 2e       	mov	r0, r17
 3cc:	00 0c       	add	r0, r0
 3ce:	88 0b       	sbc	r24, r24
 3d0:	99 0b       	sbc	r25, r25
 3d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
 3d6:	9b 01       	movw	r18, r22
 3d8:	ac 01       	movw	r20, r24
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	80 e2       	ldi	r24, 0x20	; 32
 3e0:	91 e4       	ldi	r25, 0x41	; 65
 3e2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <pow>
 3e6:	9b 01       	movw	r18, r22
 3e8:	ac 01       	movw	r20, r24
 3ea:	c3 01       	movw	r24, r6
 3ec:	b2 01       	movw	r22, r4
 3ee:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
 3f2:	21 96       	adiw	r28, 0x01	; 1
 3f4:	ce 0d       	add	r28, r14
 3f6:	df 1d       	adc	r29, r15
 3f8:	0e 94 9c 04 	call	0x938	; 0x938 <__fixsfsi>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
 400:	a8 01       	movw	r20, r16
 402:	be 01       	movw	r22, r28
 404:	0e 94 81 01 	call	0x302	; 0x302 <intToStr>
	}
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	9f 90       	pop	r9
 41a:	8f 90       	pop	r8
 41c:	7f 90       	pop	r7
 41e:	6f 90       	pop	r6
 420:	5f 90       	pop	r5
 422:	4f 90       	pop	r4
 424:	08 95       	ret

00000426 <main>:


int main()
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	ac 97       	sbiw	r28, 0x2c	; 44
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
	DDRB |= 0b00000010; //Data Direction Register B: writing a 1 to the bit enables output
 43a:	84 b1       	in	r24, 0x04	; 4
 43c:	82 60       	ori	r24, 0x02	; 2
 43e:	84 b9       	out	0x04, r24	; 4
	DDRB |= 0b00000100; //Data Direction Register B: writing a 1 to the bit enables output
 440:	84 b1       	in	r24, 0x04	; 4
 442:	84 60       	ori	r24, 0x04	; 4
 444:	84 b9       	out	0x04, r24	; 4
	char int_buffer2[10];
	char int_buffer3[10];
	char int_buffer4[10];

	// initialize adc and lcd
	adc_init();
 446:	0e 94 4e 01 	call	0x29c	; 0x29c <adc_init>
	lcdinit();
 44a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcdinit>
	
	lcd_gotoxy(0,0);
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
	lcd_print("  SOLAR  PANEL ");
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
	lcd_gotoxy(0,1);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
	lcd_print("DAMAGE DETECTION");
 466:	80 e1       	ldi	r24, 0x10	; 16
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
 46e:	2f ef       	ldi	r18, 0xFF	; 255
 470:	87 ea       	ldi	r24, 0xA7	; 167
 472:	91 e6       	ldi	r25, 0x61	; 97
 474:	21 50       	subi	r18, 0x01	; 1
 476:	80 40       	sbci	r24, 0x00	; 0
 478:	90 40       	sbci	r25, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <main+0x4e>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <main+0x58>
 47e:	00 00       	nop
	_delay_ms(2000);
			
	lcd_clear();
 480:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear>

	
	lcd_gotoxy(0,0);
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
	lcd_print("  GROUP NO : 17 ");
 48c:	81 e2       	ldi	r24, 0x21	; 33
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
	lcd_gotoxy(0,1);
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
 49c:	2f ef       	ldi	r18, 0xFF	; 255
 49e:	87 ea       	ldi	r24, 0xA7	; 167
 4a0:	91 e6       	ldi	r25, 0x61	; 97
 4a2:	21 50       	subi	r18, 0x01	; 1
 4a4:	80 40       	sbci	r24, 0x00	; 0
 4a6:	90 40       	sbci	r25, 0x00	; 0
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <main+0x7c>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <main+0x86>
 4ac:	00 00       	nop
	_delay_ms(2000);

	lcd_clear();
 4ae:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear>


	while(1)
	{
 		adc_result0 = ((adc_read(0)*0.00488) - 2.5)/0.066;      // read adc value at PA0 | Calculate the current
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 55 01 	call	0x2aa	; 0x2aa <adc_read>
 4b8:	bc 01       	movw	r22, r24
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 4c2:	28 e6       	ldi	r18, 0x68	; 104
 4c4:	38 ee       	ldi	r19, 0xE8	; 232
 4c6:	4f e9       	ldi	r20, 0x9F	; 159
 4c8:	5b e3       	ldi	r21, 0x3B	; 59
 4ca:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e2       	ldi	r20, 0x20	; 32
 4d4:	50 e4       	ldi	r21, 0x40	; 64
 4d6:	0e 94 b8 03 	call	0x770	; 0x770 <__subsf3>
 4da:	22 e0       	ldi	r18, 0x02	; 2
 4dc:	3b e2       	ldi	r19, 0x2B	; 43
 4de:	47 e8       	ldi	r20, 0x87	; 135
 4e0:	5d e3       	ldi	r21, 0x3D	; 61
 4e2:	0e 94 2a 04 	call	0x854	; 0x854 <__divsf3>
 4e6:	4b 01       	movw	r8, r22
 4e8:	5c 01       	movw	r10, r24
		adc_result1 = (adc_read(1)*0.00488)*6;    // read adc value at PA1 | Calculate the voltage
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 55 01 	call	0x2aa	; 0x2aa <adc_read>
 4f0:	bc 01       	movw	r22, r24
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 4fa:	28 e6       	ldi	r18, 0x68	; 104
 4fc:	38 ee       	ldi	r19, 0xE8	; 232
 4fe:	4f e9       	ldi	r20, 0x9F	; 159
 500:	5b e3       	ldi	r21, 0x3B	; 59
 502:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 ec       	ldi	r20, 0xC0	; 192
 50c:	50 e4       	ldi	r21, 0x40	; 64
 50e:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 512:	69 a7       	std	Y+41, r22	; 0x29
 514:	7a a7       	std	Y+42, r23	; 0x2a
 516:	8b a7       	std	Y+43, r24	; 0x2b
 518:	9c a7       	std	Y+44, r25	; 0x2c
		adc_result2 = adc_result0*adc_result1;	//Calculate the power
 51a:	9b 01       	movw	r18, r22
 51c:	ac 01       	movw	r20, r24
 51e:	c5 01       	movw	r24, r10
 520:	b4 01       	movw	r22, r8
 522:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 526:	6b 01       	movw	r12, r22
 528:	7c 01       	movw	r14, r24
 		adc_result3 =(((adc_read(2)*0.00488) - 2.5)/0.066) *((adc_read(3)*0.00488)*6);    // read adc value at PA2 and PA3 | Calculate the reference power
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 55 01 	call	0x2aa	; 0x2aa <adc_read>
 530:	bc 01       	movw	r22, r24
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 53a:	28 e6       	ldi	r18, 0x68	; 104
 53c:	38 ee       	ldi	r19, 0xE8	; 232
 53e:	4f e9       	ldi	r20, 0x9F	; 159
 540:	5b e3       	ldi	r21, 0x3B	; 59
 542:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 e2       	ldi	r20, 0x20	; 32
 54c:	50 e4       	ldi	r21, 0x40	; 64
 54e:	0e 94 b8 03 	call	0x770	; 0x770 <__subsf3>
 552:	22 e0       	ldi	r18, 0x02	; 2
 554:	3b e2       	ldi	r19, 0x2B	; 43
 556:	47 e8       	ldi	r20, 0x87	; 135
 558:	5d e3       	ldi	r21, 0x3D	; 61
 55a:	0e 94 2a 04 	call	0x854	; 0x854 <__divsf3>
 55e:	2b 01       	movw	r4, r22
 560:	3c 01       	movw	r6, r24
 562:	83 e0       	ldi	r24, 0x03	; 3
 564:	0e 94 55 01 	call	0x2aa	; 0x2aa <adc_read>
 568:	bc 01       	movw	r22, r24
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 572:	28 e6       	ldi	r18, 0x68	; 104
 574:	38 ee       	ldi	r19, 0xE8	; 232
 576:	4f e9       	ldi	r20, 0x9F	; 159
 578:	5b e3       	ldi	r21, 0x3B	; 59
 57a:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	40 ec       	ldi	r20, 0xC0	; 192
 584:	50 e4       	ldi	r21, 0x40	; 64
 586:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 58a:	9b 01       	movw	r18, r22
 58c:	ac 01       	movw	r20, r24
 58e:	c3 01       	movw	r24, r6
 590:	b2 01       	movw	r22, r4
 592:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 596:	2b 01       	movw	r4, r22
 598:	3c 01       	movw	r6, r24
		
		// condition for led to glow
		
		
		// now display current on lcd
		lcd_gotoxy(0,0);
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print("Current=");
 5a2:	82 e3       	ldi	r24, 0x32	; 50
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
		// 		itoa(adc_result0, int_buffer1, 10);
		ftoa(adc_result0, int_buffer1, 2 );
 5aa:	22 e0       	ldi	r18, 0x02	; 2
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	ae 01       	movw	r20, r28
 5b0:	4f 5f       	subi	r20, 0xFF	; 255
 5b2:	5f 4f       	sbci	r21, 0xFF	; 255
 5b4:	c5 01       	movw	r24, r10
 5b6:	b4 01       	movw	r22, r8
 5b8:	0e 94 b1 01 	call	0x362	; 0x362 <ftoa>
// 		sprintf (int_buffer1, "%f", adc_result0);
 		lcd_gotoxy(8,0);
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	88 e0       	ldi	r24, 0x08	; 8
 5c0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print(int_buffer1);
 5c4:	ce 01       	movw	r24, r28
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
		lcd_gotoxy(13,0);
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	8d e0       	ldi	r24, 0x0D	; 13
 5d0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print("A");
 5d4:	8b e3       	ldi	r24, 0x3B	; 59
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	83 ed       	ldi	r24, 0xD3	; 211
 5e0:	90 e3       	ldi	r25, 0x30	; 48
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0x1bc>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0x1c6>
 5ec:	00 00       	nop
		_delay_ms(1000);

		
		
		// now display voltage on lcd
		lcd_gotoxy(0,1);
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print("Voltage=");
 5f6:	8d e3       	ldi	r24, 0x3D	; 61
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
 		ftoa(adc_result1, int_buffer2, 4 );
 5fe:	24 e0       	ldi	r18, 0x04	; 4
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	ae 01       	movw	r20, r28
 604:	45 5f       	subi	r20, 0xF5	; 245
 606:	5f 4f       	sbci	r21, 0xFF	; 255
 608:	69 a5       	ldd	r22, Y+41	; 0x29
 60a:	7a a5       	ldd	r23, Y+42	; 0x2a
 60c:	8b a5       	ldd	r24, Y+43	; 0x2b
 60e:	9c a5       	ldd	r25, Y+44	; 0x2c
 610:	0e 94 b1 01 	call	0x362	; 0x362 <ftoa>
		// 		itoa(adc_result1, int_buffer2, 10);
 		lcd_gotoxy(8,1);
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	88 e0       	ldi	r24, 0x08	; 8
 618:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
 		lcd_print(int_buffer2);
 61c:	ce 01       	movw	r24, r28
 61e:	0b 96       	adiw	r24, 0x0b	; 11
 620:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
		lcd_gotoxy(13,1);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	8d e0       	ldi	r24, 0x0D	; 13
 628:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print("V");
 62c:	86 e4       	ldi	r24, 0x46	; 70
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
 634:	2f ef       	ldi	r18, 0xFF	; 255
 636:	8b e7       	ldi	r24, 0x7B	; 123
 638:	92 e9       	ldi	r25, 0x92	; 146
 63a:	21 50       	subi	r18, 0x01	; 1
 63c:	80 40       	sbci	r24, 0x00	; 0
 63e:	90 40       	sbci	r25, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <main+0x214>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x21e>
 644:	00 00       	nop
		_delay_ms(3000);
		
		lcd_clear();
 646:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear>
		
		// now display power on lcd
 		ftoa(adc_result2, int_buffer3, 2 );
 64a:	22 e0       	ldi	r18, 0x02	; 2
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	ae 01       	movw	r20, r28
 650:	4b 5e       	subi	r20, 0xEB	; 235
 652:	5f 4f       	sbci	r21, 0xFF	; 255
 654:	c7 01       	movw	r24, r14
 656:	b6 01       	movw	r22, r12
 658:	0e 94 b1 01 	call	0x362	; 0x362 <ftoa>
		// 		itoa(adc_result2, int_buffer3, 10);
		lcd_gotoxy(0,0);
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print("Power=");
 664:	8d e4       	ldi	r24, 0x4D	; 77
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
		lcd_gotoxy(6,0);
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	86 e0       	ldi	r24, 0x06	; 6
 670:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print(int_buffer3);
 674:	ce 01       	movw	r24, r28
 676:	45 96       	adiw	r24, 0x15	; 21
 678:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
		lcd_gotoxy(12,0);
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	8c e0       	ldi	r24, 0x0C	; 12
 680:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print("W");
 684:	88 e4       	ldi	r24, 0x48	; 72
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
 68c:	2f ef       	ldi	r18, 0xFF	; 255
 68e:	83 ed       	ldi	r24, 0xD3	; 211
 690:	90 e3       	ldi	r25, 0x30	; 48
 692:	21 50       	subi	r18, 0x01	; 1
 694:	80 40       	sbci	r24, 0x00	; 0
 696:	90 40       	sbci	r25, 0x00	; 0
 698:	e1 f7       	brne	.-8      	; 0x692 <main+0x26c>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <main+0x276>
 69c:	00 00       	nop
		_delay_ms(1000);
		
		// now display reference power on lcd
		// 		itoa(adc_result3, int_buffer4, 10);
 		ftoa(adc_result3, int_buffer4, 2 );
 69e:	22 e0       	ldi	r18, 0x02	; 2
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	ae 01       	movw	r20, r28
 6a4:	41 5e       	subi	r20, 0xE1	; 225
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
 6a8:	c3 01       	movw	r24, r6
 6aa:	b2 01       	movw	r22, r4
 6ac:	0e 94 b1 01 	call	0x362	; 0x362 <ftoa>
		lcd_gotoxy(0,1);
 6b0:	61 e0       	ldi	r22, 0x01	; 1
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print("RefPower=");
 6b8:	8a e4       	ldi	r24, 0x4A	; 74
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
		lcd_gotoxy(9,1);
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	89 e0       	ldi	r24, 0x09	; 9
 6c4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print(int_buffer4);
 6c8:	ce 01       	movw	r24, r28
 6ca:	4f 96       	adiw	r24, 0x1f	; 31
 6cc:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
		lcd_gotoxy(14,1);
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	8e e0       	ldi	r24, 0x0E	; 14
 6d4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
		lcd_print("W");
 6d8:	88 e4       	ldi	r24, 0x48	; 72
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
 6e0:	2f ef       	ldi	r18, 0xFF	; 255
 6e2:	8b e7       	ldi	r24, 0x7B	; 123
 6e4:	92 e9       	ldi	r25, 0x92	; 146
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	80 40       	sbci	r24, 0x00	; 0
 6ea:	90 40       	sbci	r25, 0x00	; 0
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x2c0>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <main+0x2ca>
 6f0:	00 00       	nop
		_delay_ms(3000);
		
		lcd_clear();
 6f2:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear>
		
		if (adc_result2 != adc_result3)
 6f6:	a3 01       	movw	r20, r6
 6f8:	92 01       	movw	r18, r4
 6fa:	c7 01       	movw	r24, r14
 6fc:	b6 01       	movw	r22, r12
 6fe:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 702:	88 23       	and	r24, r24
 704:	b1 f0       	breq	.+44     	; 0x732 <main+0x30c>
		{
			lcd_gotoxy(0,0);
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
			lcd_print("THERE IS DAMAGE");
 70e:	84 e5       	ldi	r24, 0x54	; 84
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>

			PORTB= 0b00000010; //turns on LED attached to port PB0
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	85 b9       	out	0x05, r24	; 5
 71a:	2f ef       	ldi	r18, 0xFF	; 255
 71c:	8b e7       	ldi	r24, 0x7B	; 123
 71e:	92 e9       	ldi	r25, 0x92	; 146
 720:	21 50       	subi	r18, 0x01	; 1
 722:	80 40       	sbci	r24, 0x00	; 0
 724:	90 40       	sbci	r25, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <main+0x2fa>
 728:	00 c0       	rjmp	.+0      	; 0x72a <main+0x304>
 72a:	00 00       	nop
			_delay_ms(3000);

			lcd_clear();
 72c:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear>
 730:	c0 ce       	rjmp	.-640    	; 0x4b2 <main+0x8c>
		}
		
		
		else
		{
			lcd_gotoxy(0,0);
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
			lcd_print("THERE IS NO");
 73a:	84 e6       	ldi	r24, 0x64	; 100
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
			lcd_gotoxy(0,1);
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	0e 94 19 01 	call	0x232	; 0x232 <lcd_gotoxy>
			lcd_print("DAMAGE");
 74a:	8d e5       	ldi	r24, 0x5D	; 93
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	0e 94 31 01 	call	0x262	; 0x262 <lcd_print>
			
			PORTB= 0b00000000; //Turns off all B pins, including PB0
 752:	15 b8       	out	0x05, r1	; 5
			PORTB= 0b00000100; //turns on LED attached to port PB0
 754:	84 e0       	ldi	r24, 0x04	; 4
 756:	85 b9       	out	0x05, r24	; 5
 758:	2f ef       	ldi	r18, 0xFF	; 255
 75a:	8b e7       	ldi	r24, 0x7B	; 123
 75c:	92 e9       	ldi	r25, 0x92	; 146
 75e:	21 50       	subi	r18, 0x01	; 1
 760:	80 40       	sbci	r24, 0x00	; 0
 762:	90 40       	sbci	r25, 0x00	; 0
 764:	e1 f7       	brne	.-8      	; 0x75e <main+0x338>
 766:	00 c0       	rjmp	.+0      	; 0x768 <main+0x342>
 768:	00 00       	nop
			_delay_ms(3000);

			lcd_clear();
 76a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear>
 76e:	a1 ce       	rjmp	.-702    	; 0x4b2 <main+0x8c>

00000770 <__subsf3>:
 770:	50 58       	subi	r21, 0x80	; 128

00000772 <__addsf3>:
 772:	bb 27       	eor	r27, r27
 774:	aa 27       	eor	r26, r26
 776:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__addsf3x>
 77a:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_round>
 77e:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_pscA>
 782:	38 f0       	brcs	.+14     	; 0x792 <__addsf3+0x20>
 784:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_pscB>
 788:	20 f0       	brcs	.+8      	; 0x792 <__addsf3+0x20>
 78a:	39 f4       	brne	.+14     	; 0x79a <__addsf3+0x28>
 78c:	9f 3f       	cpi	r25, 0xFF	; 255
 78e:	19 f4       	brne	.+6      	; 0x796 <__addsf3+0x24>
 790:	26 f4       	brtc	.+8      	; 0x79a <__addsf3+0x28>
 792:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_nan>
 796:	0e f4       	brtc	.+2      	; 0x79a <__addsf3+0x28>
 798:	e0 95       	com	r30
 79a:	e7 fb       	bst	r30, 7
 79c:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_inf>

000007a0 <__addsf3x>:
 7a0:	e9 2f       	mov	r30, r25
 7a2:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_split3>
 7a6:	58 f3       	brcs	.-42     	; 0x77e <__addsf3+0xc>
 7a8:	ba 17       	cp	r27, r26
 7aa:	62 07       	cpc	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	95 07       	cpc	r25, r21
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__addsf3x+0x1c>
 7b4:	79 f4       	brne	.+30     	; 0x7d4 <__addsf3x+0x34>
 7b6:	a6 f5       	brtc	.+104    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7b8:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_zero>
 7bc:	0e f4       	brtc	.+2      	; 0x7c0 <__addsf3x+0x20>
 7be:	e0 95       	com	r30
 7c0:	0b 2e       	mov	r0, r27
 7c2:	ba 2f       	mov	r27, r26
 7c4:	a0 2d       	mov	r26, r0
 7c6:	0b 01       	movw	r0, r22
 7c8:	b9 01       	movw	r22, r18
 7ca:	90 01       	movw	r18, r0
 7cc:	0c 01       	movw	r0, r24
 7ce:	ca 01       	movw	r24, r20
 7d0:	a0 01       	movw	r20, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	ff 27       	eor	r31, r31
 7d6:	59 1b       	sub	r21, r25
 7d8:	99 f0       	breq	.+38     	; 0x800 <__DATA_REGION_LENGTH__>
 7da:	59 3f       	cpi	r21, 0xF9	; 249
 7dc:	50 f4       	brcc	.+20     	; 0x7f2 <__addsf3x+0x52>
 7de:	50 3e       	cpi	r21, 0xE0	; 224
 7e0:	68 f1       	brcs	.+90     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 7e2:	1a 16       	cp	r1, r26
 7e4:	f0 40       	sbci	r31, 0x00	; 0
 7e6:	a2 2f       	mov	r26, r18
 7e8:	23 2f       	mov	r18, r19
 7ea:	34 2f       	mov	r19, r20
 7ec:	44 27       	eor	r20, r20
 7ee:	58 5f       	subi	r21, 0xF8	; 248
 7f0:	f3 cf       	rjmp	.-26     	; 0x7d8 <__addsf3x+0x38>
 7f2:	46 95       	lsr	r20
 7f4:	37 95       	ror	r19
 7f6:	27 95       	ror	r18
 7f8:	a7 95       	ror	r26
 7fa:	f0 40       	sbci	r31, 0x00	; 0
 7fc:	53 95       	inc	r21
 7fe:	c9 f7       	brne	.-14     	; 0x7f2 <__addsf3x+0x52>
 800:	7e f4       	brtc	.+30     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 802:	1f 16       	cp	r1, r31
 804:	ba 0b       	sbc	r27, r26
 806:	62 0b       	sbc	r22, r18
 808:	73 0b       	sbc	r23, r19
 80a:	84 0b       	sbc	r24, r20
 80c:	ba f0       	brmi	.+46     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	a1 f0       	breq	.+40     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 812:	ff 0f       	add	r31, r31
 814:	bb 1f       	adc	r27, r27
 816:	66 1f       	adc	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	c2 f7       	brpl	.-16     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 81e:	0e c0       	rjmp	.+28     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 820:	ba 0f       	add	r27, r26
 822:	62 1f       	adc	r22, r18
 824:	73 1f       	adc	r23, r19
 826:	84 1f       	adc	r24, r20
 828:	48 f4       	brcc	.+18     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 82a:	87 95       	ror	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f7 95       	ror	r31
 834:	9e 3f       	cpi	r25, 0xFE	; 254
 836:	08 f0       	brcs	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 838:	b0 cf       	rjmp	.-160    	; 0x79a <__addsf3+0x28>
 83a:	93 95       	inc	r25
 83c:	88 0f       	add	r24, r24
 83e:	08 f0       	brcs	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 840:	99 27       	eor	r25, r25
 842:	ee 0f       	add	r30, r30
 844:	97 95       	ror	r25
 846:	87 95       	ror	r24
 848:	08 95       	ret

0000084a <__cmpsf2>:
 84a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_cmp>
 84e:	08 f4       	brcc	.+2      	; 0x852 <__cmpsf2+0x8>
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	08 95       	ret

00000854 <__divsf3>:
 854:	0e 94 3e 04 	call	0x87c	; 0x87c <__divsf3x>
 858:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_round>
 85c:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_pscB>
 860:	58 f0       	brcs	.+22     	; 0x878 <__divsf3+0x24>
 862:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_pscA>
 866:	40 f0       	brcs	.+16     	; 0x878 <__divsf3+0x24>
 868:	29 f4       	brne	.+10     	; 0x874 <__divsf3+0x20>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	29 f0       	breq	.+10     	; 0x878 <__divsf3+0x24>
 86e:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_inf>
 872:	51 11       	cpse	r21, r1
 874:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_szero>
 878:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_nan>

0000087c <__divsf3x>:
 87c:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_split3>
 880:	68 f3       	brcs	.-38     	; 0x85c <__divsf3+0x8>

00000882 <__divsf3_pse>:
 882:	99 23       	and	r25, r25
 884:	b1 f3       	breq	.-20     	; 0x872 <__divsf3+0x1e>
 886:	55 23       	and	r21, r21
 888:	91 f3       	breq	.-28     	; 0x86e <__divsf3+0x1a>
 88a:	95 1b       	sub	r25, r21
 88c:	55 0b       	sbc	r21, r21
 88e:	bb 27       	eor	r27, r27
 890:	aa 27       	eor	r26, r26
 892:	62 17       	cp	r22, r18
 894:	73 07       	cpc	r23, r19
 896:	84 07       	cpc	r24, r20
 898:	38 f0       	brcs	.+14     	; 0x8a8 <__divsf3_pse+0x26>
 89a:	9f 5f       	subi	r25, 0xFF	; 255
 89c:	5f 4f       	sbci	r21, 0xFF	; 255
 89e:	22 0f       	add	r18, r18
 8a0:	33 1f       	adc	r19, r19
 8a2:	44 1f       	adc	r20, r20
 8a4:	aa 1f       	adc	r26, r26
 8a6:	a9 f3       	breq	.-22     	; 0x892 <__divsf3_pse+0x10>
 8a8:	35 d0       	rcall	.+106    	; 0x914 <__stack+0x15>
 8aa:	0e 2e       	mov	r0, r30
 8ac:	3a f0       	brmi	.+14     	; 0x8bc <__divsf3_pse+0x3a>
 8ae:	e0 e8       	ldi	r30, 0x80	; 128
 8b0:	32 d0       	rcall	.+100    	; 0x916 <__stack+0x17>
 8b2:	91 50       	subi	r25, 0x01	; 1
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	e6 95       	lsr	r30
 8b8:	00 1c       	adc	r0, r0
 8ba:	ca f7       	brpl	.-14     	; 0x8ae <__divsf3_pse+0x2c>
 8bc:	2b d0       	rcall	.+86     	; 0x914 <__stack+0x15>
 8be:	fe 2f       	mov	r31, r30
 8c0:	29 d0       	rcall	.+82     	; 0x914 <__stack+0x15>
 8c2:	66 0f       	add	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	88 1f       	adc	r24, r24
 8c8:	bb 1f       	adc	r27, r27
 8ca:	26 17       	cp	r18, r22
 8cc:	37 07       	cpc	r19, r23
 8ce:	48 07       	cpc	r20, r24
 8d0:	ab 07       	cpc	r26, r27
 8d2:	b0 e8       	ldi	r27, 0x80	; 128
 8d4:	09 f0       	breq	.+2      	; 0x8d8 <__divsf3_pse+0x56>
 8d6:	bb 0b       	sbc	r27, r27
 8d8:	80 2d       	mov	r24, r0
 8da:	bf 01       	movw	r22, r30
 8dc:	ff 27       	eor	r31, r31
 8de:	93 58       	subi	r25, 0x83	; 131
 8e0:	5f 4f       	sbci	r21, 0xFF	; 255
 8e2:	3a f0       	brmi	.+14     	; 0x8f2 <__divsf3_pse+0x70>
 8e4:	9e 3f       	cpi	r25, 0xFE	; 254
 8e6:	51 05       	cpc	r21, r1
 8e8:	78 f0       	brcs	.+30     	; 0x908 <__stack+0x9>
 8ea:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_inf>
 8ee:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_szero>
 8f2:	5f 3f       	cpi	r21, 0xFF	; 255
 8f4:	e4 f3       	brlt	.-8      	; 0x8ee <__divsf3_pse+0x6c>
 8f6:	98 3e       	cpi	r25, 0xE8	; 232
 8f8:	d4 f3       	brlt	.-12     	; 0x8ee <__divsf3_pse+0x6c>
 8fa:	86 95       	lsr	r24
 8fc:	77 95       	ror	r23
 8fe:	67 95       	ror	r22
 900:	b7 95       	ror	r27
 902:	f7 95       	ror	r31
 904:	9f 5f       	subi	r25, 0xFF	; 255
 906:	c9 f7       	brne	.-14     	; 0x8fa <__divsf3_pse+0x78>
 908:	88 0f       	add	r24, r24
 90a:	91 1d       	adc	r25, r1
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret
 914:	e1 e0       	ldi	r30, 0x01	; 1
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	bb 1f       	adc	r27, r27
 91e:	62 17       	cp	r22, r18
 920:	73 07       	cpc	r23, r19
 922:	84 07       	cpc	r24, r20
 924:	ba 07       	cpc	r27, r26
 926:	20 f0       	brcs	.+8      	; 0x930 <__stack+0x31>
 928:	62 1b       	sub	r22, r18
 92a:	73 0b       	sbc	r23, r19
 92c:	84 0b       	sbc	r24, r20
 92e:	ba 0b       	sbc	r27, r26
 930:	ee 1f       	adc	r30, r30
 932:	88 f7       	brcc	.-30     	; 0x916 <__stack+0x17>
 934:	e0 95       	com	r30
 936:	08 95       	ret

00000938 <__fixsfsi>:
 938:	0e 94 a3 04 	call	0x946	; 0x946 <__fixunssfsi>
 93c:	68 94       	set
 93e:	b1 11       	cpse	r27, r1
 940:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_szero>
 944:	08 95       	ret

00000946 <__fixunssfsi>:
 946:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_splitA>
 94a:	88 f0       	brcs	.+34     	; 0x96e <__fixunssfsi+0x28>
 94c:	9f 57       	subi	r25, 0x7F	; 127
 94e:	98 f0       	brcs	.+38     	; 0x976 <__fixunssfsi+0x30>
 950:	b9 2f       	mov	r27, r25
 952:	99 27       	eor	r25, r25
 954:	b7 51       	subi	r27, 0x17	; 23
 956:	b0 f0       	brcs	.+44     	; 0x984 <__fixunssfsi+0x3e>
 958:	e1 f0       	breq	.+56     	; 0x992 <__fixunssfsi+0x4c>
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	1a f0       	brmi	.+6      	; 0x96a <__fixunssfsi+0x24>
 964:	ba 95       	dec	r27
 966:	c9 f7       	brne	.-14     	; 0x95a <__fixunssfsi+0x14>
 968:	14 c0       	rjmp	.+40     	; 0x992 <__fixunssfsi+0x4c>
 96a:	b1 30       	cpi	r27, 0x01	; 1
 96c:	91 f0       	breq	.+36     	; 0x992 <__fixunssfsi+0x4c>
 96e:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_zero>
 972:	b1 e0       	ldi	r27, 0x01	; 1
 974:	08 95       	ret
 976:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_zero>
 97a:	67 2f       	mov	r22, r23
 97c:	78 2f       	mov	r23, r24
 97e:	88 27       	eor	r24, r24
 980:	b8 5f       	subi	r27, 0xF8	; 248
 982:	39 f0       	breq	.+14     	; 0x992 <__fixunssfsi+0x4c>
 984:	b9 3f       	cpi	r27, 0xF9	; 249
 986:	cc f3       	brlt	.-14     	; 0x97a <__fixunssfsi+0x34>
 988:	86 95       	lsr	r24
 98a:	77 95       	ror	r23
 98c:	67 95       	ror	r22
 98e:	b3 95       	inc	r27
 990:	d9 f7       	brne	.-10     	; 0x988 <__fixunssfsi+0x42>
 992:	3e f4       	brtc	.+14     	; 0x9a2 <__fixunssfsi+0x5c>
 994:	90 95       	com	r25
 996:	80 95       	com	r24
 998:	70 95       	com	r23
 99a:	61 95       	neg	r22
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	08 95       	ret

000009a4 <__floatunsisf>:
 9a4:	e8 94       	clt
 9a6:	09 c0       	rjmp	.+18     	; 0x9ba <__floatsisf+0x12>

000009a8 <__floatsisf>:
 9a8:	97 fb       	bst	r25, 7
 9aa:	3e f4       	brtc	.+14     	; 0x9ba <__floatsisf+0x12>
 9ac:	90 95       	com	r25
 9ae:	80 95       	com	r24
 9b0:	70 95       	com	r23
 9b2:	61 95       	neg	r22
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	99 23       	and	r25, r25
 9bc:	a9 f0       	breq	.+42     	; 0x9e8 <__floatsisf+0x40>
 9be:	f9 2f       	mov	r31, r25
 9c0:	96 e9       	ldi	r25, 0x96	; 150
 9c2:	bb 27       	eor	r27, r27
 9c4:	93 95       	inc	r25
 9c6:	f6 95       	lsr	r31
 9c8:	87 95       	ror	r24
 9ca:	77 95       	ror	r23
 9cc:	67 95       	ror	r22
 9ce:	b7 95       	ror	r27
 9d0:	f1 11       	cpse	r31, r1
 9d2:	f8 cf       	rjmp	.-16     	; 0x9c4 <__floatsisf+0x1c>
 9d4:	fa f4       	brpl	.+62     	; 0xa14 <__floatsisf+0x6c>
 9d6:	bb 0f       	add	r27, r27
 9d8:	11 f4       	brne	.+4      	; 0x9de <__floatsisf+0x36>
 9da:	60 ff       	sbrs	r22, 0
 9dc:	1b c0       	rjmp	.+54     	; 0xa14 <__floatsisf+0x6c>
 9de:	6f 5f       	subi	r22, 0xFF	; 255
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	16 c0       	rjmp	.+44     	; 0xa14 <__floatsisf+0x6c>
 9e8:	88 23       	and	r24, r24
 9ea:	11 f0       	breq	.+4      	; 0x9f0 <__floatsisf+0x48>
 9ec:	96 e9       	ldi	r25, 0x96	; 150
 9ee:	11 c0       	rjmp	.+34     	; 0xa12 <__floatsisf+0x6a>
 9f0:	77 23       	and	r23, r23
 9f2:	21 f0       	breq	.+8      	; 0x9fc <__floatsisf+0x54>
 9f4:	9e e8       	ldi	r25, 0x8E	; 142
 9f6:	87 2f       	mov	r24, r23
 9f8:	76 2f       	mov	r23, r22
 9fa:	05 c0       	rjmp	.+10     	; 0xa06 <__floatsisf+0x5e>
 9fc:	66 23       	and	r22, r22
 9fe:	71 f0       	breq	.+28     	; 0xa1c <__floatsisf+0x74>
 a00:	96 e8       	ldi	r25, 0x86	; 134
 a02:	86 2f       	mov	r24, r22
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	2a f0       	brmi	.+10     	; 0xa14 <__floatsisf+0x6c>
 a0a:	9a 95       	dec	r25
 a0c:	66 0f       	add	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	da f7       	brpl	.-10     	; 0xa0a <__floatsisf+0x62>
 a14:	88 0f       	add	r24, r24
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__fp_cmp>:
 a1e:	99 0f       	add	r25, r25
 a20:	00 08       	sbc	r0, r0
 a22:	55 0f       	add	r21, r21
 a24:	aa 0b       	sbc	r26, r26
 a26:	e0 e8       	ldi	r30, 0x80	; 128
 a28:	fe ef       	ldi	r31, 0xFE	; 254
 a2a:	16 16       	cp	r1, r22
 a2c:	17 06       	cpc	r1, r23
 a2e:	e8 07       	cpc	r30, r24
 a30:	f9 07       	cpc	r31, r25
 a32:	c0 f0       	brcs	.+48     	; 0xa64 <__fp_cmp+0x46>
 a34:	12 16       	cp	r1, r18
 a36:	13 06       	cpc	r1, r19
 a38:	e4 07       	cpc	r30, r20
 a3a:	f5 07       	cpc	r31, r21
 a3c:	98 f0       	brcs	.+38     	; 0xa64 <__fp_cmp+0x46>
 a3e:	62 1b       	sub	r22, r18
 a40:	73 0b       	sbc	r23, r19
 a42:	84 0b       	sbc	r24, r20
 a44:	95 0b       	sbc	r25, r21
 a46:	39 f4       	brne	.+14     	; 0xa56 <__fp_cmp+0x38>
 a48:	0a 26       	eor	r0, r26
 a4a:	61 f0       	breq	.+24     	; 0xa64 <__fp_cmp+0x46>
 a4c:	23 2b       	or	r18, r19
 a4e:	24 2b       	or	r18, r20
 a50:	25 2b       	or	r18, r21
 a52:	21 f4       	brne	.+8      	; 0xa5c <__fp_cmp+0x3e>
 a54:	08 95       	ret
 a56:	0a 26       	eor	r0, r26
 a58:	09 f4       	brne	.+2      	; 0xa5c <__fp_cmp+0x3e>
 a5a:	a1 40       	sbci	r26, 0x01	; 1
 a5c:	a6 95       	lsr	r26
 a5e:	8f ef       	ldi	r24, 0xFF	; 255
 a60:	81 1d       	adc	r24, r1
 a62:	81 1d       	adc	r24, r1
 a64:	08 95       	ret

00000a66 <__fp_inf>:
 a66:	97 f9       	bld	r25, 7
 a68:	9f 67       	ori	r25, 0x7F	; 127
 a6a:	80 e8       	ldi	r24, 0x80	; 128
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	08 95       	ret

00000a72 <__fp_nan>:
 a72:	9f ef       	ldi	r25, 0xFF	; 255
 a74:	80 ec       	ldi	r24, 0xC0	; 192
 a76:	08 95       	ret

00000a78 <__fp_pscA>:
 a78:	00 24       	eor	r0, r0
 a7a:	0a 94       	dec	r0
 a7c:	16 16       	cp	r1, r22
 a7e:	17 06       	cpc	r1, r23
 a80:	18 06       	cpc	r1, r24
 a82:	09 06       	cpc	r0, r25
 a84:	08 95       	ret

00000a86 <__fp_pscB>:
 a86:	00 24       	eor	r0, r0
 a88:	0a 94       	dec	r0
 a8a:	12 16       	cp	r1, r18
 a8c:	13 06       	cpc	r1, r19
 a8e:	14 06       	cpc	r1, r20
 a90:	05 06       	cpc	r0, r21
 a92:	08 95       	ret

00000a94 <__fp_round>:
 a94:	09 2e       	mov	r0, r25
 a96:	03 94       	inc	r0
 a98:	00 0c       	add	r0, r0
 a9a:	11 f4       	brne	.+4      	; 0xaa0 <__fp_round+0xc>
 a9c:	88 23       	and	r24, r24
 a9e:	52 f0       	brmi	.+20     	; 0xab4 <__fp_round+0x20>
 aa0:	bb 0f       	add	r27, r27
 aa2:	40 f4       	brcc	.+16     	; 0xab4 <__fp_round+0x20>
 aa4:	bf 2b       	or	r27, r31
 aa6:	11 f4       	brne	.+4      	; 0xaac <__fp_round+0x18>
 aa8:	60 ff       	sbrs	r22, 0
 aaa:	04 c0       	rjmp	.+8      	; 0xab4 <__fp_round+0x20>
 aac:	6f 5f       	subi	r22, 0xFF	; 255
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	08 95       	ret

00000ab6 <__fp_split3>:
 ab6:	57 fd       	sbrc	r21, 7
 ab8:	90 58       	subi	r25, 0x80	; 128
 aba:	44 0f       	add	r20, r20
 abc:	55 1f       	adc	r21, r21
 abe:	59 f0       	breq	.+22     	; 0xad6 <__fp_splitA+0x10>
 ac0:	5f 3f       	cpi	r21, 0xFF	; 255
 ac2:	71 f0       	breq	.+28     	; 0xae0 <__fp_splitA+0x1a>
 ac4:	47 95       	ror	r20

00000ac6 <__fp_splitA>:
 ac6:	88 0f       	add	r24, r24
 ac8:	97 fb       	bst	r25, 7
 aca:	99 1f       	adc	r25, r25
 acc:	61 f0       	breq	.+24     	; 0xae6 <__fp_splitA+0x20>
 ace:	9f 3f       	cpi	r25, 0xFF	; 255
 ad0:	79 f0       	breq	.+30     	; 0xaf0 <__fp_splitA+0x2a>
 ad2:	87 95       	ror	r24
 ad4:	08 95       	ret
 ad6:	12 16       	cp	r1, r18
 ad8:	13 06       	cpc	r1, r19
 ada:	14 06       	cpc	r1, r20
 adc:	55 1f       	adc	r21, r21
 ade:	f2 cf       	rjmp	.-28     	; 0xac4 <__fp_split3+0xe>
 ae0:	46 95       	lsr	r20
 ae2:	f1 df       	rcall	.-30     	; 0xac6 <__fp_splitA>
 ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <__fp_splitA+0x30>
 ae6:	16 16       	cp	r1, r22
 ae8:	17 06       	cpc	r1, r23
 aea:	18 06       	cpc	r1, r24
 aec:	99 1f       	adc	r25, r25
 aee:	f1 cf       	rjmp	.-30     	; 0xad2 <__fp_splitA+0xc>
 af0:	86 95       	lsr	r24
 af2:	71 05       	cpc	r23, r1
 af4:	61 05       	cpc	r22, r1
 af6:	08 94       	sec
 af8:	08 95       	ret

00000afa <__fp_zero>:
 afa:	e8 94       	clt

00000afc <__fp_szero>:
 afc:	bb 27       	eor	r27, r27
 afe:	66 27       	eor	r22, r22
 b00:	77 27       	eor	r23, r23
 b02:	cb 01       	movw	r24, r22
 b04:	97 f9       	bld	r25, 7
 b06:	08 95       	ret

00000b08 <__mulsf3>:
 b08:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3x>
 b0c:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_round>
 b10:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_pscA>
 b14:	38 f0       	brcs	.+14     	; 0xb24 <__mulsf3+0x1c>
 b16:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_pscB>
 b1a:	20 f0       	brcs	.+8      	; 0xb24 <__mulsf3+0x1c>
 b1c:	95 23       	and	r25, r21
 b1e:	11 f0       	breq	.+4      	; 0xb24 <__mulsf3+0x1c>
 b20:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_inf>
 b24:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_nan>
 b28:	11 24       	eor	r1, r1
 b2a:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_szero>

00000b2e <__mulsf3x>:
 b2e:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_split3>
 b32:	70 f3       	brcs	.-36     	; 0xb10 <__mulsf3+0x8>

00000b34 <__mulsf3_pse>:
 b34:	95 9f       	mul	r25, r21
 b36:	c1 f3       	breq	.-16     	; 0xb28 <__mulsf3+0x20>
 b38:	95 0f       	add	r25, r21
 b3a:	50 e0       	ldi	r21, 0x00	; 0
 b3c:	55 1f       	adc	r21, r21
 b3e:	62 9f       	mul	r22, r18
 b40:	f0 01       	movw	r30, r0
 b42:	72 9f       	mul	r23, r18
 b44:	bb 27       	eor	r27, r27
 b46:	f0 0d       	add	r31, r0
 b48:	b1 1d       	adc	r27, r1
 b4a:	63 9f       	mul	r22, r19
 b4c:	aa 27       	eor	r26, r26
 b4e:	f0 0d       	add	r31, r0
 b50:	b1 1d       	adc	r27, r1
 b52:	aa 1f       	adc	r26, r26
 b54:	64 9f       	mul	r22, r20
 b56:	66 27       	eor	r22, r22
 b58:	b0 0d       	add	r27, r0
 b5a:	a1 1d       	adc	r26, r1
 b5c:	66 1f       	adc	r22, r22
 b5e:	82 9f       	mul	r24, r18
 b60:	22 27       	eor	r18, r18
 b62:	b0 0d       	add	r27, r0
 b64:	a1 1d       	adc	r26, r1
 b66:	62 1f       	adc	r22, r18
 b68:	73 9f       	mul	r23, r19
 b6a:	b0 0d       	add	r27, r0
 b6c:	a1 1d       	adc	r26, r1
 b6e:	62 1f       	adc	r22, r18
 b70:	83 9f       	mul	r24, r19
 b72:	a0 0d       	add	r26, r0
 b74:	61 1d       	adc	r22, r1
 b76:	22 1f       	adc	r18, r18
 b78:	74 9f       	mul	r23, r20
 b7a:	33 27       	eor	r19, r19
 b7c:	a0 0d       	add	r26, r0
 b7e:	61 1d       	adc	r22, r1
 b80:	23 1f       	adc	r18, r19
 b82:	84 9f       	mul	r24, r20
 b84:	60 0d       	add	r22, r0
 b86:	21 1d       	adc	r18, r1
 b88:	82 2f       	mov	r24, r18
 b8a:	76 2f       	mov	r23, r22
 b8c:	6a 2f       	mov	r22, r26
 b8e:	11 24       	eor	r1, r1
 b90:	9f 57       	subi	r25, 0x7F	; 127
 b92:	50 40       	sbci	r21, 0x00	; 0
 b94:	9a f0       	brmi	.+38     	; 0xbbc <__mulsf3_pse+0x88>
 b96:	f1 f0       	breq	.+60     	; 0xbd4 <__mulsf3_pse+0xa0>
 b98:	88 23       	and	r24, r24
 b9a:	4a f0       	brmi	.+18     	; 0xbae <__mulsf3_pse+0x7a>
 b9c:	ee 0f       	add	r30, r30
 b9e:	ff 1f       	adc	r31, r31
 ba0:	bb 1f       	adc	r27, r27
 ba2:	66 1f       	adc	r22, r22
 ba4:	77 1f       	adc	r23, r23
 ba6:	88 1f       	adc	r24, r24
 ba8:	91 50       	subi	r25, 0x01	; 1
 baa:	50 40       	sbci	r21, 0x00	; 0
 bac:	a9 f7       	brne	.-22     	; 0xb98 <__mulsf3_pse+0x64>
 bae:	9e 3f       	cpi	r25, 0xFE	; 254
 bb0:	51 05       	cpc	r21, r1
 bb2:	80 f0       	brcs	.+32     	; 0xbd4 <__mulsf3_pse+0xa0>
 bb4:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_inf>
 bb8:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_szero>
 bbc:	5f 3f       	cpi	r21, 0xFF	; 255
 bbe:	e4 f3       	brlt	.-8      	; 0xbb8 <__mulsf3_pse+0x84>
 bc0:	98 3e       	cpi	r25, 0xE8	; 232
 bc2:	d4 f3       	brlt	.-12     	; 0xbb8 <__mulsf3_pse+0x84>
 bc4:	86 95       	lsr	r24
 bc6:	77 95       	ror	r23
 bc8:	67 95       	ror	r22
 bca:	b7 95       	ror	r27
 bcc:	f7 95       	ror	r31
 bce:	e7 95       	ror	r30
 bd0:	9f 5f       	subi	r25, 0xFF	; 255
 bd2:	c1 f7       	brne	.-16     	; 0xbc4 <__mulsf3_pse+0x90>
 bd4:	fe 2b       	or	r31, r30
 bd6:	88 0f       	add	r24, r24
 bd8:	91 1d       	adc	r25, r1
 bda:	96 95       	lsr	r25
 bdc:	87 95       	ror	r24
 bde:	97 f9       	bld	r25, 7
 be0:	08 95       	ret

00000be2 <pow>:
 be2:	fa 01       	movw	r30, r20
 be4:	ee 0f       	add	r30, r30
 be6:	ff 1f       	adc	r31, r31
 be8:	30 96       	adiw	r30, 0x00	; 0
 bea:	21 05       	cpc	r18, r1
 bec:	31 05       	cpc	r19, r1
 bee:	a1 f1       	breq	.+104    	; 0xc58 <pow+0x76>
 bf0:	61 15       	cp	r22, r1
 bf2:	71 05       	cpc	r23, r1
 bf4:	61 f4       	brne	.+24     	; 0xc0e <pow+0x2c>
 bf6:	80 38       	cpi	r24, 0x80	; 128
 bf8:	bf e3       	ldi	r27, 0x3F	; 63
 bfa:	9b 07       	cpc	r25, r27
 bfc:	49 f1       	breq	.+82     	; 0xc50 <pow+0x6e>
 bfe:	68 94       	set
 c00:	90 38       	cpi	r25, 0x80	; 128
 c02:	81 05       	cpc	r24, r1
 c04:	61 f0       	breq	.+24     	; 0xc1e <pow+0x3c>
 c06:	80 38       	cpi	r24, 0x80	; 128
 c08:	bf ef       	ldi	r27, 0xFF	; 255
 c0a:	9b 07       	cpc	r25, r27
 c0c:	41 f0       	breq	.+16     	; 0xc1e <pow+0x3c>
 c0e:	99 23       	and	r25, r25
 c10:	4a f5       	brpl	.+82     	; 0xc64 <pow+0x82>
 c12:	ff 3f       	cpi	r31, 0xFF	; 255
 c14:	e1 05       	cpc	r30, r1
 c16:	31 05       	cpc	r19, r1
 c18:	21 05       	cpc	r18, r1
 c1a:	19 f1       	breq	.+70     	; 0xc62 <pow+0x80>
 c1c:	e8 94       	clt
 c1e:	08 94       	sec
 c20:	e7 95       	ror	r30
 c22:	d9 01       	movw	r26, r18
 c24:	aa 23       	and	r26, r26
 c26:	29 f4       	brne	.+10     	; 0xc32 <pow+0x50>
 c28:	ab 2f       	mov	r26, r27
 c2a:	be 2f       	mov	r27, r30
 c2c:	f8 5f       	subi	r31, 0xF8	; 248
 c2e:	d0 f3       	brcs	.-12     	; 0xc24 <pow+0x42>
 c30:	10 c0       	rjmp	.+32     	; 0xc52 <pow+0x70>
 c32:	ff 5f       	subi	r31, 0xFF	; 255
 c34:	70 f4       	brcc	.+28     	; 0xc52 <pow+0x70>
 c36:	a6 95       	lsr	r26
 c38:	e0 f7       	brcc	.-8      	; 0xc32 <pow+0x50>
 c3a:	f7 39       	cpi	r31, 0x97	; 151
 c3c:	50 f0       	brcs	.+20     	; 0xc52 <pow+0x70>
 c3e:	19 f0       	breq	.+6      	; 0xc46 <pow+0x64>
 c40:	ff 3a       	cpi	r31, 0xAF	; 175
 c42:	38 f4       	brcc	.+14     	; 0xc52 <pow+0x70>
 c44:	9f 77       	andi	r25, 0x7F	; 127
 c46:	9f 93       	push	r25
 c48:	0d d0       	rcall	.+26     	; 0xc64 <pow+0x82>
 c4a:	0f 90       	pop	r0
 c4c:	07 fc       	sbrc	r0, 7
 c4e:	90 58       	subi	r25, 0x80	; 128
 c50:	08 95       	ret
 c52:	46 f0       	brts	.+16     	; 0xc64 <pow+0x82>
 c54:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_nan>
 c58:	60 e0       	ldi	r22, 0x00	; 0
 c5a:	70 e0       	ldi	r23, 0x00	; 0
 c5c:	80 e8       	ldi	r24, 0x80	; 128
 c5e:	9f e3       	ldi	r25, 0x3F	; 63
 c60:	08 95       	ret
 c62:	4f e7       	ldi	r20, 0x7F	; 127
 c64:	9f 77       	andi	r25, 0x7F	; 127
 c66:	5f 93       	push	r21
 c68:	4f 93       	push	r20
 c6a:	3f 93       	push	r19
 c6c:	2f 93       	push	r18
 c6e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <log>
 c72:	2f 91       	pop	r18
 c74:	3f 91       	pop	r19
 c76:	4f 91       	pop	r20
 c78:	5f 91       	pop	r21
 c7a:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
 c7e:	0c 94 49 06 	jmp	0xc92	; 0xc92 <exp>
 c82:	29 f4       	brne	.+10     	; 0xc8e <pow+0xac>
 c84:	16 f0       	brts	.+4      	; 0xc8a <pow+0xa8>
 c86:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_inf>
 c8a:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_zero>
 c8e:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_nan>

00000c92 <exp>:
 c92:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_splitA>
 c96:	a8 f3       	brcs	.-22     	; 0xc82 <pow+0xa0>
 c98:	96 38       	cpi	r25, 0x86	; 134
 c9a:	a0 f7       	brcc	.-24     	; 0xc84 <pow+0xa2>
 c9c:	07 f8       	bld	r0, 7
 c9e:	0f 92       	push	r0
 ca0:	e8 94       	clt
 ca2:	2b e3       	ldi	r18, 0x3B	; 59
 ca4:	3a ea       	ldi	r19, 0xAA	; 170
 ca6:	48 eb       	ldi	r20, 0xB8	; 184
 ca8:	5f e7       	ldi	r21, 0x7F	; 127
 caa:	0e 94 9a 05 	call	0xb34	; 0xb34 <__mulsf3_pse>
 cae:	0f 92       	push	r0
 cb0:	0f 92       	push	r0
 cb2:	0f 92       	push	r0
 cb4:	4d b7       	in	r20, 0x3d	; 61
 cb6:	5e b7       	in	r21, 0x3e	; 62
 cb8:	0f 92       	push	r0
 cba:	0e 94 34 07 	call	0xe68	; 0xe68 <modf>
 cbe:	e8 e6       	ldi	r30, 0x68	; 104
 cc0:	f0 e0       	ldi	r31, 0x00	; 0
 cc2:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__fp_powser>
 cc6:	4f 91       	pop	r20
 cc8:	5f 91       	pop	r21
 cca:	ef 91       	pop	r30
 ccc:	ff 91       	pop	r31
 cce:	e5 95       	asr	r30
 cd0:	ee 1f       	adc	r30, r30
 cd2:	ff 1f       	adc	r31, r31
 cd4:	49 f0       	breq	.+18     	; 0xce8 <exp+0x56>
 cd6:	fe 57       	subi	r31, 0x7E	; 126
 cd8:	e0 68       	ori	r30, 0x80	; 128
 cda:	44 27       	eor	r20, r20
 cdc:	ee 0f       	add	r30, r30
 cde:	44 1f       	adc	r20, r20
 ce0:	fa 95       	dec	r31
 ce2:	e1 f7       	brne	.-8      	; 0xcdc <exp+0x4a>
 ce4:	41 95       	neg	r20
 ce6:	55 0b       	sbc	r21, r21
 ce8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <ldexp>
 cec:	0f 90       	pop	r0
 cee:	07 fe       	sbrs	r0, 7
 cf0:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <inverse>
 cf4:	08 95       	ret

00000cf6 <__fp_powser>:
 cf6:	df 93       	push	r29
 cf8:	cf 93       	push	r28
 cfa:	1f 93       	push	r17
 cfc:	0f 93       	push	r16
 cfe:	ff 92       	push	r15
 d00:	ef 92       	push	r14
 d02:	df 92       	push	r13
 d04:	7b 01       	movw	r14, r22
 d06:	8c 01       	movw	r16, r24
 d08:	68 94       	set
 d0a:	06 c0       	rjmp	.+12     	; 0xd18 <__fp_powser+0x22>
 d0c:	da 2e       	mov	r13, r26
 d0e:	ef 01       	movw	r28, r30
 d10:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3x>
 d14:	fe 01       	movw	r30, r28
 d16:	e8 94       	clt
 d18:	a5 91       	lpm	r26, Z+
 d1a:	25 91       	lpm	r18, Z+
 d1c:	35 91       	lpm	r19, Z+
 d1e:	45 91       	lpm	r20, Z+
 d20:	55 91       	lpm	r21, Z+
 d22:	a6 f3       	brts	.-24     	; 0xd0c <__fp_powser+0x16>
 d24:	ef 01       	movw	r28, r30
 d26:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__addsf3x>
 d2a:	fe 01       	movw	r30, r28
 d2c:	97 01       	movw	r18, r14
 d2e:	a8 01       	movw	r20, r16
 d30:	da 94       	dec	r13
 d32:	69 f7       	brne	.-38     	; 0xd0e <__fp_powser+0x18>
 d34:	df 90       	pop	r13
 d36:	ef 90       	pop	r14
 d38:	ff 90       	pop	r15
 d3a:	0f 91       	pop	r16
 d3c:	1f 91       	pop	r17
 d3e:	cf 91       	pop	r28
 d40:	df 91       	pop	r29
 d42:	08 95       	ret

00000d44 <inverse>:
 d44:	9b 01       	movw	r18, r22
 d46:	ac 01       	movw	r20, r24
 d48:	60 e0       	ldi	r22, 0x00	; 0
 d4a:	70 e0       	ldi	r23, 0x00	; 0
 d4c:	80 e8       	ldi	r24, 0x80	; 128
 d4e:	9f e3       	ldi	r25, 0x3F	; 63
 d50:	0c 94 2a 04 	jmp	0x854	; 0x854 <__divsf3>
 d54:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_inf>
 d58:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_mpack>

00000d5c <ldexp>:
 d5c:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_splitA>
 d60:	d8 f3       	brcs	.-10     	; 0xd58 <inverse+0x14>
 d62:	99 23       	and	r25, r25
 d64:	c9 f3       	breq	.-14     	; 0xd58 <inverse+0x14>
 d66:	94 0f       	add	r25, r20
 d68:	51 1d       	adc	r21, r1
 d6a:	a3 f3       	brvs	.-24     	; 0xd54 <inverse+0x10>
 d6c:	91 50       	subi	r25, 0x01	; 1
 d6e:	50 40       	sbci	r21, 0x00	; 0
 d70:	94 f0       	brlt	.+36     	; 0xd96 <ldexp+0x3a>
 d72:	59 f0       	breq	.+22     	; 0xd8a <ldexp+0x2e>
 d74:	88 23       	and	r24, r24
 d76:	32 f0       	brmi	.+12     	; 0xd84 <ldexp+0x28>
 d78:	66 0f       	add	r22, r22
 d7a:	77 1f       	adc	r23, r23
 d7c:	88 1f       	adc	r24, r24
 d7e:	91 50       	subi	r25, 0x01	; 1
 d80:	50 40       	sbci	r21, 0x00	; 0
 d82:	c1 f7       	brne	.-16     	; 0xd74 <ldexp+0x18>
 d84:	9e 3f       	cpi	r25, 0xFE	; 254
 d86:	51 05       	cpc	r21, r1
 d88:	2c f7       	brge	.-54     	; 0xd54 <inverse+0x10>
 d8a:	88 0f       	add	r24, r24
 d8c:	91 1d       	adc	r25, r1
 d8e:	96 95       	lsr	r25
 d90:	87 95       	ror	r24
 d92:	97 f9       	bld	r25, 7
 d94:	08 95       	ret
 d96:	5f 3f       	cpi	r21, 0xFF	; 255
 d98:	ac f0       	brlt	.+42     	; 0xdc4 <ldexp+0x68>
 d9a:	98 3e       	cpi	r25, 0xE8	; 232
 d9c:	9c f0       	brlt	.+38     	; 0xdc4 <ldexp+0x68>
 d9e:	bb 27       	eor	r27, r27
 da0:	86 95       	lsr	r24
 da2:	77 95       	ror	r23
 da4:	67 95       	ror	r22
 da6:	b7 95       	ror	r27
 da8:	08 f4       	brcc	.+2      	; 0xdac <ldexp+0x50>
 daa:	b1 60       	ori	r27, 0x01	; 1
 dac:	93 95       	inc	r25
 dae:	c1 f7       	brne	.-16     	; 0xda0 <ldexp+0x44>
 db0:	bb 0f       	add	r27, r27
 db2:	58 f7       	brcc	.-42     	; 0xd8a <ldexp+0x2e>
 db4:	11 f4       	brne	.+4      	; 0xdba <ldexp+0x5e>
 db6:	60 ff       	sbrs	r22, 0
 db8:	e8 cf       	rjmp	.-48     	; 0xd8a <ldexp+0x2e>
 dba:	6f 5f       	subi	r22, 0xFF	; 255
 dbc:	7f 4f       	sbci	r23, 0xFF	; 255
 dbe:	8f 4f       	sbci	r24, 0xFF	; 255
 dc0:	9f 4f       	sbci	r25, 0xFF	; 255
 dc2:	e3 cf       	rjmp	.-58     	; 0xd8a <ldexp+0x2e>
 dc4:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_szero>
 dc8:	16 f0       	brts	.+4      	; 0xdce <ldexp+0x72>
 dca:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_mpack>
 dce:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_nan>
 dd2:	68 94       	set
 dd4:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_inf>

00000dd8 <log>:
 dd8:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_splitA>
 ddc:	a8 f3       	brcs	.-22     	; 0xdc8 <ldexp+0x6c>
 dde:	99 23       	and	r25, r25
 de0:	c1 f3       	breq	.-16     	; 0xdd2 <ldexp+0x76>
 de2:	ae f3       	brts	.-22     	; 0xdce <ldexp+0x72>
 de4:	df 93       	push	r29
 de6:	cf 93       	push	r28
 de8:	1f 93       	push	r17
 dea:	0f 93       	push	r16
 dec:	ff 92       	push	r15
 dee:	c9 2f       	mov	r28, r25
 df0:	dd 27       	eor	r29, r29
 df2:	88 23       	and	r24, r24
 df4:	2a f0       	brmi	.+10     	; 0xe00 <log+0x28>
 df6:	21 97       	sbiw	r28, 0x01	; 1
 df8:	66 0f       	add	r22, r22
 dfa:	77 1f       	adc	r23, r23
 dfc:	88 1f       	adc	r24, r24
 dfe:	da f7       	brpl	.-10     	; 0xdf6 <log+0x1e>
 e00:	20 e0       	ldi	r18, 0x00	; 0
 e02:	30 e0       	ldi	r19, 0x00	; 0
 e04:	40 e8       	ldi	r20, 0x80	; 128
 e06:	5f eb       	ldi	r21, 0xBF	; 191
 e08:	9f e3       	ldi	r25, 0x3F	; 63
 e0a:	88 39       	cpi	r24, 0x98	; 152
 e0c:	20 f0       	brcs	.+8      	; 0xe16 <log+0x3e>
 e0e:	80 3e       	cpi	r24, 0xE0	; 224
 e10:	38 f0       	brcs	.+14     	; 0xe20 <log+0x48>
 e12:	21 96       	adiw	r28, 0x01	; 1
 e14:	8f 77       	andi	r24, 0x7F	; 127
 e16:	0e 94 b9 03 	call	0x772	; 0x772 <__addsf3>
 e1a:	e0 e9       	ldi	r30, 0x90	; 144
 e1c:	f0 e0       	ldi	r31, 0x00	; 0
 e1e:	04 c0       	rjmp	.+8      	; 0xe28 <log+0x50>
 e20:	0e 94 b9 03 	call	0x772	; 0x772 <__addsf3>
 e24:	ed eb       	ldi	r30, 0xBD	; 189
 e26:	f0 e0       	ldi	r31, 0x00	; 0
 e28:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__fp_powser>
 e2c:	8b 01       	movw	r16, r22
 e2e:	be 01       	movw	r22, r28
 e30:	ec 01       	movw	r28, r24
 e32:	fb 2e       	mov	r15, r27
 e34:	6f 57       	subi	r22, 0x7F	; 127
 e36:	71 09       	sbc	r23, r1
 e38:	75 95       	asr	r23
 e3a:	77 1f       	adc	r23, r23
 e3c:	88 0b       	sbc	r24, r24
 e3e:	99 0b       	sbc	r25, r25
 e40:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
 e44:	28 e1       	ldi	r18, 0x18	; 24
 e46:	32 e7       	ldi	r19, 0x72	; 114
 e48:	41 e3       	ldi	r20, 0x31	; 49
 e4a:	5f e3       	ldi	r21, 0x3F	; 63
 e4c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3x>
 e50:	af 2d       	mov	r26, r15
 e52:	98 01       	movw	r18, r16
 e54:	ae 01       	movw	r20, r28
 e56:	ff 90       	pop	r15
 e58:	0f 91       	pop	r16
 e5a:	1f 91       	pop	r17
 e5c:	cf 91       	pop	r28
 e5e:	df 91       	pop	r29
 e60:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__addsf3x>
 e64:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_round>

00000e68 <modf>:
 e68:	fa 01       	movw	r30, r20
 e6a:	dc 01       	movw	r26, r24
 e6c:	aa 0f       	add	r26, r26
 e6e:	bb 1f       	adc	r27, r27
 e70:	9b 01       	movw	r18, r22
 e72:	ac 01       	movw	r20, r24
 e74:	bf 57       	subi	r27, 0x7F	; 127
 e76:	28 f4       	brcc	.+10     	; 0xe82 <modf+0x1a>
 e78:	22 27       	eor	r18, r18
 e7a:	33 27       	eor	r19, r19
 e7c:	44 27       	eor	r20, r20
 e7e:	50 78       	andi	r21, 0x80	; 128
 e80:	20 c0       	rjmp	.+64     	; 0xec2 <modf+0x5a>
 e82:	b7 51       	subi	r27, 0x17	; 23
 e84:	90 f4       	brcc	.+36     	; 0xeaa <modf+0x42>
 e86:	ab 2f       	mov	r26, r27
 e88:	00 24       	eor	r0, r0
 e8a:	46 95       	lsr	r20
 e8c:	37 95       	ror	r19
 e8e:	27 95       	ror	r18
 e90:	01 1c       	adc	r0, r1
 e92:	a3 95       	inc	r26
 e94:	d2 f3       	brmi	.-12     	; 0xe8a <modf+0x22>
 e96:	00 20       	and	r0, r0
 e98:	71 f0       	breq	.+28     	; 0xeb6 <modf+0x4e>
 e9a:	22 0f       	add	r18, r18
 e9c:	33 1f       	adc	r19, r19
 e9e:	44 1f       	adc	r20, r20
 ea0:	b3 95       	inc	r27
 ea2:	da f3       	brmi	.-10     	; 0xe9a <modf+0x32>
 ea4:	0e d0       	rcall	.+28     	; 0xec2 <modf+0x5a>
 ea6:	0c 94 b8 03 	jmp	0x770	; 0x770 <__subsf3>
 eaa:	61 30       	cpi	r22, 0x01	; 1
 eac:	71 05       	cpc	r23, r1
 eae:	a0 e8       	ldi	r26, 0x80	; 128
 eb0:	8a 07       	cpc	r24, r26
 eb2:	b9 46       	sbci	r27, 0x69	; 105
 eb4:	30 f4       	brcc	.+12     	; 0xec2 <modf+0x5a>
 eb6:	9b 01       	movw	r18, r22
 eb8:	ac 01       	movw	r20, r24
 eba:	66 27       	eor	r22, r22
 ebc:	77 27       	eor	r23, r23
 ebe:	88 27       	eor	r24, r24
 ec0:	90 78       	andi	r25, 0x80	; 128
 ec2:	30 96       	adiw	r30, 0x00	; 0
 ec4:	21 f0       	breq	.+8      	; 0xece <modf+0x66>
 ec6:	20 83       	st	Z, r18
 ec8:	31 83       	std	Z+1, r19	; 0x01
 eca:	42 83       	std	Z+2, r20	; 0x02
 ecc:	53 83       	std	Z+3, r21	; 0x03
 ece:	08 95       	ret

00000ed0 <__fp_mpack>:
 ed0:	9f 3f       	cpi	r25, 0xFF	; 255
 ed2:	31 f0       	breq	.+12     	; 0xee0 <__fp_mpack_finite+0xc>

00000ed4 <__fp_mpack_finite>:
 ed4:	91 50       	subi	r25, 0x01	; 1
 ed6:	20 f4       	brcc	.+8      	; 0xee0 <__fp_mpack_finite+0xc>
 ed8:	87 95       	ror	r24
 eda:	77 95       	ror	r23
 edc:	67 95       	ror	r22
 ede:	b7 95       	ror	r27
 ee0:	88 0f       	add	r24, r24
 ee2:	91 1d       	adc	r25, r1
 ee4:	96 95       	lsr	r25
 ee6:	87 95       	ror	r24
 ee8:	97 f9       	bld	r25, 7
 eea:	08 95       	ret

00000eec <__divmodhi4>:
 eec:	97 fb       	bst	r25, 7
 eee:	07 2e       	mov	r0, r23
 ef0:	16 f4       	brtc	.+4      	; 0xef6 <__divmodhi4+0xa>
 ef2:	00 94       	com	r0
 ef4:	07 d0       	rcall	.+14     	; 0xf04 <__divmodhi4_neg1>
 ef6:	77 fd       	sbrc	r23, 7
 ef8:	09 d0       	rcall	.+18     	; 0xf0c <__divmodhi4_neg2>
 efa:	0e 94 8a 07 	call	0xf14	; 0xf14 <__udivmodhi4>
 efe:	07 fc       	sbrc	r0, 7
 f00:	05 d0       	rcall	.+10     	; 0xf0c <__divmodhi4_neg2>
 f02:	3e f4       	brtc	.+14     	; 0xf12 <__divmodhi4_exit>

00000f04 <__divmodhi4_neg1>:
 f04:	90 95       	com	r25
 f06:	81 95       	neg	r24
 f08:	9f 4f       	sbci	r25, 0xFF	; 255
 f0a:	08 95       	ret

00000f0c <__divmodhi4_neg2>:
 f0c:	70 95       	com	r23
 f0e:	61 95       	neg	r22
 f10:	7f 4f       	sbci	r23, 0xFF	; 255

00000f12 <__divmodhi4_exit>:
 f12:	08 95       	ret

00000f14 <__udivmodhi4>:
 f14:	aa 1b       	sub	r26, r26
 f16:	bb 1b       	sub	r27, r27
 f18:	51 e1       	ldi	r21, 0x11	; 17
 f1a:	07 c0       	rjmp	.+14     	; 0xf2a <__udivmodhi4_ep>

00000f1c <__udivmodhi4_loop>:
 f1c:	aa 1f       	adc	r26, r26
 f1e:	bb 1f       	adc	r27, r27
 f20:	a6 17       	cp	r26, r22
 f22:	b7 07       	cpc	r27, r23
 f24:	10 f0       	brcs	.+4      	; 0xf2a <__udivmodhi4_ep>
 f26:	a6 1b       	sub	r26, r22
 f28:	b7 0b       	sbc	r27, r23

00000f2a <__udivmodhi4_ep>:
 f2a:	88 1f       	adc	r24, r24
 f2c:	99 1f       	adc	r25, r25
 f2e:	5a 95       	dec	r21
 f30:	a9 f7       	brne	.-22     	; 0xf1c <__udivmodhi4_loop>
 f32:	80 95       	com	r24
 f34:	90 95       	com	r25
 f36:	bc 01       	movw	r22, r24
 f38:	cd 01       	movw	r24, r26
 f3a:	08 95       	ret

00000f3c <_exit>:
 f3c:	f8 94       	cli

00000f3e <__stop_program>:
 f3e:	ff cf       	rjmp	.-2      	; 0xf3e <__stop_program>
